Kadane's Algorithm
===================================================================================================================

int maxSumSubarray(int[] arr) {
  
  int maxsum = 0;
  int currsum = 0;
  
  for(int i = 0; i<n; i++) {
  
  currsum += arr[i];
  
   if(currsum > maxsum) {
      maxsum = currsum;
   }
    
    if(currsum < 0) {
    currsum = 0; 
    }
  }
    return maxsum;

 }

============================================
LeetCode
============================================
class Solution {
    public int maxSubArray(int[] nums) {
         
        int n = nums.length;
        int max = Integer.MIN_VALUE, sum = 0;
        
        for(int i=0;i<n;i++){
            sum += nums[i];
            max = Math.max(sum,max);
            
            if(sum<0) sum = 0;
        }
        
        return max;
    }
}
